import Syllable from "./Syllable"

const inflexp_pattern 
    = "("
    + "(?<prefix>(((\\$|%|@)[0-9]{1,2})*[^ 0-9*\\-|.;:,_!~$%@/]*((\\$|%|@)[0-9]{1,2})*))"
    + "(?<prefixPush>(\\._?!{0,3}((\\$|%|@)[0-9]{1,2})*[^ 0-9*\\-|.;:,_!~$%@/]*((\\$|%|@)[0-9]{1,2})*!{0,3})*)"
    + "(?<prefixMagnet>(~(\\$|%|@)?)*)"
    + "(?<prefixMark>=?)"
    + "(?<!^)\\-)?"
    + "("
    + "(?<infixPlacement>(\\|){1,2})"
    + "(?<infixFirst>(((\\$|%|@)[0-9]{1,2})*[^ 0-9*\\-|.;:,_!~$%@/]*((\\$|%|@)[0-9]{1,2})*))"
    + "(?<infixRest>(\\.((\\$|%|@)[0-9]{1,2})*[^ 0-9*\\-|.;:,_!~$%@/]*((\\$|%|@)[0-9]{1,2})*)*)"
    + "\\|)?"
    + "("
    + "("
    + "(?<rightwardRepetitionFirst>(=?_?(~(\\$|%|@)?)*(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*(,(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*)*\\+?(~(\\$|%|@)?)*=?)?)"
    + "(?<rightwardRepetitionRest>(\\:(=?_?(~(\\$|%|@)?)*(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*(,(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*)*\\+?(~(\\$|%|@)?)*=?)?)*)"
    + "(?<!^|\\-);)"
    + "|"
    + "(;"
    + "(?<leftwardRepetitionFirst>(=?(~(\\$|%|@)?)*(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*(,(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*)*\\+?(~(\\$|%|@)?)*_?=?)?)"
    + "(?<leftwardRepetitionRest>(\\:(=?(~(\\$|%|@)?)*(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*(,(\\$\\$|%%|@@)*(([1-3]|[4-6]|[7-9]){1,3}|[*]{1,3})(\\$\\$|%%|@@)*)*\\+?(~(\\$|%|@)?)*_?=?)?)*)"
    + ")"
    + "|"
    + "(?<baseRepetition>(#\\+?=?|=?#\\+?)*)"
    + ")?"
    + "(\\-"
    + "(?<suffixMark>=?)"
    + "(?<suffixMagnet>(~(\\$|%|@)?)*)"
    + "(?<suffixPush>(!{0,3}((\\$|%|@)[0-9]{1,2})*[^ 0-9*\\-|.;:,_!~$%@/]*((\\$|%|@)[0-9]{1,2})*!{0,3}_?\\.)*)"
    + "(?<suffix>(((\\$|%|@)[0-9]{1,2})*[^ 0-9*\\-|.;:,_!~$%@/]*((\\$|%|@)[0-9]{1,2})*))"
    + ")?"
    + "(/"
    + "(?<precedence>(r|i|p|s)*)"
    + ")?"

export default abstract class AbstractWord {

    value: Syllable[]
    syllabifier: (word: string) => Syllable[]
    printer: (word: Syllable[]) => string
    
    constructor (word: string, syllabifier: (word: string) => Syllable[], printer: (word: Syllable[]) => string) {
        this.syllabifier = syllabifier
        this.printer = printer
        this.value = this.syllabifier(word)
    }

    inflect (inflexp: string) {

    }


}

